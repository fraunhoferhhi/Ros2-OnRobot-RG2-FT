#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from onrobot_rg_msgs.msg import OnRobotRGInput
import time


def printStatus(node, status):
    """Prints the status string generated by the statusInterpreter function."""

    node.get_logger().info(statusInterpreter(status))  
#----------------------------------------------------------
class OnRobotRGStatusListener(Node):
    """Initializes the node and subscribe to the OnRobotRGInput topic."""

    def __init__(self):
        super().__init__('OnRobotRGStatusListener')
        self.subscription = self.create_subscription(
            OnRobotRGInput,
            'OnRobotRGInput',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning
#----------------------------------------------------------
    def listener_callback(self, status):
        printStatus(self, status)

#----------------------------------------------------------
def statusInterpreter(status):
    """Generates a string according to the current value
       of the status variables.
    """


    output = '\n-----\nOnRobot RG status interpreter\n-----\n'

    #combined status signal
    output += '\ng_sta = ' + str(status.g_sta) +': \nCurrent combined status of the 2 fingers and 2 \nproximity sensors. If it is 0 everything is fine.\n'

    # here the new signals start
    output += 'sta_fing_l = ' + str(status.sta_fing_l)  + ': \nCurrent Status of the left Finger, should be 0\n'
    output += 'sta_fing_r = ' + str(status.sta_fing_r) + ': \nCurrent Status of the right Finger, should be 0\n'
    output += 'sta_prox_l = ' + str(status.sta_prox_l) + ': \nCurrent Status of the left proximity sensor, should be 0\n'
    output += 'sta_prox_r = ' + str(status.sta_prox_r) + ': \nCurrent Status of the right proximity sensor, should be 0\n'
    output += 'busy = ' + str(status.busy)+  ': \nCurrent gripper status. 0 = idle, accepting commands \n/ 1 = busy, not accepting new commands\n'
    output += 'grip_det = ' + str(status.grip_det) + ': A \n1 indicates that there currently is an external \nor internal grip being detected\n'
    output += 'in_zero = ' + str(status.in_zero) + ': \nIf the value is 1, all force and torque values will be set to 0\n\n'
    time.sleep(0.1)

    return output

#----------------------------------------------------------
def main(args=None):
    rclpy.init(args=args)

    onrobot_rg_status_listener = OnRobotRGStatusListener()

    rclpy.spin(onrobot_rg_status_listener)

    onrobot_rg_status_listener.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()