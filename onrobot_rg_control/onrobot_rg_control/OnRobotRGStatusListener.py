#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from onrobot_rg_msgs.msg import OnRobotRGInput


def printStatus(node, status):
    """Prints the status string generated by the statusInterpreter function."""

    node.get_logger().info(statusInterpreter(status))  
#--------------------------------------------------------------------------
class OnRobotRGStatusListener(Node):
    """Initializes the node and subscribe to the OnRobotRGInput topic."""

    def __init__(self):
        super().__init__('OnRobotRGStatusListener')
        self.subscription = self.create_subscription(
            OnRobotRGInput,
            'OnRobotRGInput',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning
#--------------------------------------------------------------------------
    def listener_callback(self, status):
        printStatus(self, status)
#--------------------------------------------------------------------------

def statusInterpreter(status):
    """Generates a string according to the current value
       of the status variables.
    """


    output = '\n-----\nOnRobot RG status interpreter\n-----\n'

    # gFOF
    #output += 'g_fof = ' + str(status.g_fof) + ': '
    #output += 'Current fingertip offset: ' + str(status.g_fof / 10.0) + ' mm\n'

    # gGWD
    #output += 'g_gwd = ' + str(status.g_gwd) + ': '
    #output += 'Current width between the gripper fingers (w/o offset): ' + \
    #          str(status.g_gwd / 10.0) + ' mm\n'

    # gSTA
    #output += 'g_sta = ' + str(status.g_sta) + ': '
    #gSTA16bit = format(status.g_sta, '016b')
    #output += '(g_sta (16 bit) = ' + gSTA16bit + '), Current states: '
    # if int(gSTA16bit[-1]):
    #    output += ' A motion is ongoing so new commands are not accepted.'
    # if int(gSTA16bit[-2]):
    #    output += ' An internal- or external grip is detected.'
    # if int(gSTA16bit[-3]):
    #    output += ' Safety switch 1 is pushed.'
    # if int(gSTA16bit[-4]):
    #    output += ' Safety circuit 1 is activated so the gripper cannot move.'
    # if int(gSTA16bit[-5]):
    #    output += ' Safety switch 2 is pushed.'
    # if int(gSTA16bit[-6]):
    #    output += ' Safety circuit 2 is activated so the gripper cannot move.'
    # if int(gSTA16bit[-7]):
    #    output += ' Any of the safety switch is pushed.'

    # gWDF
    #output += '\ng_wdf = ' + str(status.g_wdf) + ': '
    #output += 'Current width between the gripper fingers (w offset): ' + \
    #          str(status.g_wdf / 10.0) + ' mm\n'

    #combined status signal
    output += '\ng_sta = ' + str(status.g_sta) +': Current combined status of the 2 fingers and 2 proximity sensors. If it is 0 everything is fine.\n\n'

    # here the new signals start
    output += 'sta_fing_l = ' + str(status.sta_fing_l) + ': Current Status of the left Finger, should be 0\n'
    output += 'sta_fing_r = ' + str(status.sta_fing_r) + ': Current Status of the right Finger, should be 0\n'
    output += 'sta_prox_l = ' + str(status.sta_prox_l) + ': Current Status of the left proximity sensor, should be 0\n'
    output += 'sta_prox_r = ' + str(status.sta_prox_r) + ': Current Status of the right proximity sensor, should be 0\n'
    output += 'busy = ' + str(status.busy) + ': Current gripper status. 0 = idle, accepting commands / 1 = busy, not accepting new commands\n'
    output += 'grip_det = ' + str(status.grip_det) + ': A 1 indicates that there currently is an external or internal grip being detected\n'
    output += 'in_zero = ' + str(status.in_zero) + ': If the value is 1, all force and torque values will be set to 0\n\n'


    return output
#--------------------------------------------------------------------------

def main(args=None):
    rclpy.init(args=args)

    onrobot_rg_status_listener = OnRobotRGStatusListener()

    rclpy.spin(onrobot_rg_status_listener)

    onrobot_rg_status_listener.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()